using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Models;
using AutoMapper;
using System.Data.Entity;
using Vidly.Dtos;


namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        { 
            _context = new ApplicationDbContext();
        }

        //protected override void Dispose(bool disposing)
        //{
        //    _context.Dispose();
        //}

        // Get /api/customers
        public IHttpActionResult GetCustomers(string query = null) // null means optional
        {
            // Query Customer include child MembershipType 
            var customersQuery = _context.Customers.Include(c => c.MembershipType);

            if (!string.IsNullOrWhiteSpace(query))
                customersQuery = customersQuery.Where(c => c.Name.Contains(query)); //TypeOf Linq.IQueryable<Vidly.Models.Customer>

            //TypeOf System.Collections.Generic.IEnumerable<Vidly.Dtos.CustomerDto>
            var customerDtos = customersQuery
                .ToList()
                .Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }

        //Get /api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            // Get the customer in DB and put to the Customer model and map to the CustomerDto, return type is Vidly.Dto.Customer
            var customerDto = Mapper.Map<Customer, CustomerDto>(customerInDb);

            return Ok(customerDto);
        }
   
        //POST /api/customers 
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            // Validate the inputs
            if (!ModelState.IsValid)
                return BadRequest();

            // Get the Json-data(customerDto) in the server then pass it to CustomerDto model and map it to Customer model
            // Return type is Vidly.Model.Customer
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);

            //Add to memory
            _context.Customers.Add(customer);

            //Save changes to DB
            _context.SaveChanges();

            // Update the returned default value of customerDto.id to customer.id(id Generated by DB) for the customerDto.id content 
            customerDto.Id = customer.Id;

            // New Uri and New customerDto content
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //Put /api/customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            // Validate the inputs
            if (!ModelState.IsValid)
                return BadRequest();

            // Fetch the customer in DB
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            // Check the customer if exist
            if (customerInDb == null)
                return NotFound();

            //Map customerDto value to customerInDb value
            Mapper.Map(customerDto, customerInDb);

            // Save changes to DB
            _context.SaveChanges();

            //No need to return any Uri or content as Uri is the same and content of customerDto is optional
            return Ok(customerDto);
        }

        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            //No Dto or mapping needed here, also no need to return any content as it only delete.

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            _context.Customers.Remove(customerInDb);

            _context.SaveChanges();

            return Ok();
        }
    }
}
